#!/bin/bash

#
# Run the OpenVPN server normally
#

if [ "$DEBUG" == "1" ]; then
  set -x
fi

set -e

cd $OPENVPN

# Build runtime arguments array based on environment
USER_ARGS=("${@}")
ARGS=()

# Checks if ARGS already contains the given value
function hasArg {
    local element
    for element in "${@:2}"; do
        [ "${element}" == "${1}" ] && return 0
    done
    return 1
}

# Adds the given argument if it's not already specified.
function addArg {
    local arg="${1}"
    [ $# -ge 1 ] && local val="${2}"
    if ! hasArg "${arg}" "${USER_ARGS[@]}"; then
        ARGS+=("${arg}")
        [ $# -ge 1 ] && ARGS+=("${val}")
    fi
}

# set up iptables rules and routing
# this allows rules/routing to be altered by supplying this function
# in an included file, such as ovpn_env.sh
function setupIptablesAndRouting {
    iptables -t nat -C POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE || {
      iptables -t nat -A POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE
    }
    for i in "${OVPN_ROUTES[@]}"; do
        iptables -t nat -C POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE || {
          iptables -t nat -A POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE
        }
    done
}

# Generate config and init PKI
if [ ! -f "$EASYRSA_PKI/issued/${DOMAIN_NAME:-vpn.server.address}.crt" ]; then
    if [ -d "$EASYRSA_PKI" ]; then
        mv $EASYRSA_PKI $EASYRSA_PKI.$(date "+%s").bak
    fi

    ROUTE_PUSH_ARG=""
    if [ ! -z "${ROUTE_PUSH:-}" ]; then
        echo "--> Adding routes: ${ROUTE_PUSH}"
        IFS="," read -ra ROUTES <<< "${ROUTE_PUSH:-}"
        for ROUTE in "${ROUTES[@]}"; do
            ROUTE_PUSH_ARGS+=('-p' "route ${ROUTE}")
        done
    fi

    ovpn_genconfig -u udp://${DOMAIN_NAME:-vpn.server.address} -d -N "${ROUTE_PUSH_ARGS[@]}"
    echo "--> /etc/openvpn/openvpn.conf START"
    cat /etc/openvpn/openvpn.conf
    echo "--> /etc/openvpn/openvpn.conf END"
    ovpn_initpki nopass
fi

mkdir -p $OPENVPN/clients

# Creating users
for USER in $(echo ${USERS:-} | sed "s/,/ /g")
do
    echo -n "--> Checking $USER... "
    if [ -f "$EASYRSA_PKI/private/$USER.key" ]; then
        echo "Found"
        continue
    fi
    echo "Not found, creating..."
    easyrsa build-client-full $USER nopass

    ovpn_getclient $USER > $OPENVPN/clients/$USER.ovpn
done

# Revoking users
for REVOKE_USER in $(echo ${REVOKE_USERS:-} | sed "s/,/ /g")
do
    echo -n "--> Checking for revoke $REVOKE_USER... "
    if [ ! -f "$EASYRSA_PKI/private/$REVOKE_USER.key" ]; then
        echo "Doesnt exist, skipping revoke"
        continue
    fi
    echo "Found, revoking..."
    ovpn_revokeclient $REVOKE_USER remove
    mv $OPENVPN/clients/$USER.ovpn $OPENVPN/clients/$USER-REVOKED.ovpn
done

if [ ! -z "${S3_BUCKET:-}" ]; then
    # Syncing ovpn files to S3
    echo "--> Syncing ovpn client files to S3"
    aws s3 sync $OPENVPN/clients/ s3://${S3_BUCKET} --delete
fi

addArg "--config" "$OPENVPN/openvpn.conf"

source "$OPENVPN/ovpn_env.sh"

mkdir -p /dev/net
if [ ! -c /dev/net/tun ]; then
    mknod /dev/net/tun c 10 200
fi

if [ -d "$OPENVPN/ccd" ]; then
    addArg "--client-config-dir" "$OPENVPN/ccd"
fi

# When using --net=host, use this to specify nat device.
[ -z "$OVPN_NATDEVICE" ] && OVPN_NATDEVICE=eth0

# Setup NAT forwarding if requested
if [ "$OVPN_DEFROUTE" != "0" ] || [ "$OVPN_NAT" == "1" ] ; then
	# call function to setup iptables rules and routing
	# this allows rules to be customized by supplying
	# a replacement function in, for example, ovpn_env.sh
	setupIptablesAndRouting
fi

# Use a copy of crl.pem as the CRL Needs to be readable by the user/group
# OpenVPN is running as.  Only pass arguments to OpenVPN if it's found.
if [ "$EASYRSA_PKI/crl.pem" -nt "$OPENVPN/crl.pem" ]; then
    cp -f "$EASYRSA_PKI/crl.pem" "$OPENVPN/crl.pem"
    chmod 644 "$OPENVPN/crl.pem"
fi

if [ -r "$OPENVPN/crl.pem" ]; then
    addArg "--crl-verify" "$OPENVPN/crl.pem"
fi

ip -6 route show default 2>/dev/null
if [ $? = 0 ]; then
    echo "Enabling IPv6 Forwarding"
    # If this fails, ensure the docker container is run with --privileged
    # Could be side stepped with `ip netns` madness to drop privileged flag

    sysctl -w net.ipv6.conf.all.disable_ipv6=0 || echo "Failed to enable IPv6 support"
    sysctl -w net.ipv6.conf.default.forwarding=1 || echo "Failed to enable IPv6 Forwarding default"
    sysctl -w net.ipv6.conf.all.forwarding=1 || echo "Failed to enable IPv6 Forwarding"
fi

echo "Running 'openvpn ${ARGS[@]} ${USER_ARGS[@]}'"
exec openvpn ${ARGS[@]} ${USER_ARGS[@]}
